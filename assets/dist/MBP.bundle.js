/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/CustomEvents.js":
/*!********************************!*\
  !*** ./src/js/CustomEvents.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar CustomEvents = /*#__PURE__*/function () {\n  /** @summary <h1>JavaScript regular and custom events abstraction</h1>\r\n   * @author Arthur Beaulieu\r\n   * @since June 2020\r\n   * @description <blockquote>The CustomEvents class provides an abstraction of JavaScript event listener, to allow\r\n   * easy binding and removing those events. It also provides an interface to register custom events. This class is\r\n   * meant to be used on all scopes you need ; module or global. Refer to each public method for detailed features.\r\n   * For source code, please go to <a href=\"https://github.com/ArthurBeaulieu/CustomEvents.js\" alt=\"custom-events-js\">\r\n   * https://github.com/ArthurBeaulieu/CustomEvents.js</a></blockquote>\r\n   * @param {boolean} [debug=false] - Debug flag ; when true, logs will be output in JavaScript console at each event */\n  function CustomEvents() {\n    var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    _classCallCheck(this, CustomEvents);\n\n    // Prevent wrong type for debug\n    if (typeof debug !== 'boolean') {\n      debug = false;\n    }\n    /** @private\r\n     * @member {boolean} - Internal logging flag from constructor options, allow to output each event action */\n\n\n    this._debug = debug;\n    /** @private\r\n     * @member {number} - Start the ID incrementer at pseudo random value, used for both regular and custom events */\n\n    this._idIncrementor = Math.floor(Math.random() * Math.floor(256)) * 5678;\n    /** @private\r\n     * @member {any[]} - We store classical event listeners in array of objects containing all their information */\n\n    this._regularEvents = [];\n    /** @private\r\n     * @member {object} - We store custom events by name as key, each key stores an Array of subscribed events */\n\n    this._customEvents = {};\n    /** @public\r\n     * @member {string} - Component version */\n\n    this.version = '1.2.1';\n  }\n  /** @method\r\n   * @name destroy\r\n   * @public\r\n   * @memberof CustomEvents\r\n   * @description <blockquote>CustomEvents destructor. Will remove all event listeners and keys in instance.</blockquote> */\n\n\n  _createClass(CustomEvents, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n\n      // Debug logging\n      this._raise('log', 'CustomEvents.destroy'); // Remove all existing eventListener\n\n\n      this.removeAllEvents(); // Delete object attributes\n\n      Object.keys(this).forEach(function (key) {\n        delete _this[key];\n      });\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  --------------------------------------  CLASSIC JS EVENTS OVERRIDE  ------------------------------------------  */\n\n    /*                                                                                                                  */\n\n    /*  The following methods are made to abstract the event listeners from the JavaScript layer, so you can easily     */\n\n    /*  remove them when done using, without bothering with binding usual business for them. 'addEvent/removeEvent'     */\n\n    /*  method replace the initial ones. 'removeAllEvents' clears all instance event listeners ; nice for destroy       */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name addEvent\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote><code>addEvent</code> method abstracts the <code>addEventListener</code> method to easily\r\n     * remove it when needed, also to set a custom scope on callback.</blockquote>\r\n     * @param {string} eventName - The event name to fire (mousemove, click, context etc.)\r\n     * @param {object} element - The DOM element to attach the listener to\r\n     * @param {function} callback - The callback function to execute when event is realised\r\n     * @param {object} [scope=element] - The event scope to apply to the callback (optional, default to DOM element)\r\n     * @param {object|boolean} [options=false] - The event options (useCapture and else)\r\n     * @returns {number|boolean} - The event ID to use to manually remove an event, false if arguments are invalid */\n\n  }, {\n    key: \"addEvent\",\n    value: function addEvent(eventName, element, callback) {\n      var _this2 = this;\n\n      var scope = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : element;\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      // Debug logging\n      this._raise('log', \"CustomEvents.addEvent: \".concat(eventName, \" \").concat(element, \" \").concat(callback, \" \").concat(scope, \" \").concat(options)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined || element === null || element === undefined || callback === null || callback === undefined) {\n        this._raise('error', 'CustomEvents.addEvent: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      var err = function err() {\n        _this2._raise('error', 'CustomEvents.addEvent: Wrong type for argument');\n      }; // Test argument validity for further process\n\n\n      if (typeof eventName !== 'string' || _typeof(element) !== 'object' || typeof callback !== 'function') {\n        err();\n        return false;\n      }\n\n      if (scope !== null && scope !== undefined && _typeof(scope) !== 'object') {\n        err();\n        return false;\n      }\n\n      if (options !== null && options !== undefined && _typeof(options) !== 'object' && typeof options !== 'boolean') {\n        err();\n        return false;\n      } // Save scope to callback function, default scope is DOM target object\n\n\n      callback = callback.bind(scope); // Add event to internal array and keep all its data\n\n      this._regularEvents.push({\n        id: this._idIncrementor,\n        element: element,\n        eventName: eventName,\n        scope: scope,\n        callback: callback,\n        options: options\n      }); // Add event listener with options\n\n\n      element.addEventListener(eventName, callback, options); // Post increment to return the true event entry id, then update the incrementer\n\n      return this._idIncrementor++;\n    }\n    /** @method\r\n     * @name removeEvent\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote><code>removeEvent</code> method abstracts the <code>removeEventListener</code> method to\r\n     * really remove event listeners.</blockquote>\r\n     * @param {number} eventId - The event ID to remove listener from. Returned when addEvent is called\r\n     * @returns {boolean} - The method status ; true for success, false for non-existing event */\n\n  }, {\n    key: \"removeEvent\",\n    value: function removeEvent(eventId) {\n      // Debug logging\n      this._raise('log', \"Events.removeEvent: \".concat(eventId)); // Missing mandatory arguments\n\n\n      if (eventId === null || eventId === undefined) {\n        this._raise('error', 'CustomEvents.removeEvent: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory)\n\n\n      if (typeof eventId !== 'number') {\n        this._raise('error', 'CustomEvents.removeEvent: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Iterate over saved listeners, reverse order for proper splicing\n\n      for (var i = this._regularEvents.length - 1; i >= 0; --i) {\n        // If an event ID match in saved ones, we remove it and update saved listeners\n        if (this._regularEvents[i].id === eventId) {\n          // Update status code\n          statusCode = true; // Found and removed event listener status code (true)\n\n          this._clearRegularEvent(i);\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n    /** @method\r\n     * @name removeAllEvents\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote>Clear all event listener registered through this class object.</blockquote>\r\n     * @returns {boolean} - The method status ; true for success, false for not removed any event */\n\n  }, {\n    key: \"removeAllEvents\",\n    value: function removeAllEvents() {\n      // Debug logging\n      this._raise('log', 'CustomEvents.removeAllEvents'); // Returned value\n\n\n      var statusCode = false; // Didn't removed any status code by default (false)\n      // Flag to know if there was any previously stored event listeners\n\n      var hadEvents = this._regularEvents.length > 0; // Iterate over saved listeners, reverse order for proper splicing\n\n      for (var i = this._regularEvents.length - 1; i >= 0; --i) {\n        this._clearRegularEvent(i);\n      } // If all events where removed, update statusCode to success\n\n\n      if (this._regularEvents.length === 0 && hadEvents) {\n        // Update status code\n        statusCode = true; // Found and removed all events listener status code (true)\n      } // Return with status code\n\n\n      return statusCode;\n    }\n    /** @method\r\n     * @name _clearRegularEvent\r\n     * @private\r\n     * @memberof CustomEvents\r\n     * @description <blockquote><code>_clearRegularEvent</code> method remove the saved event listener for a\r\n     * given index in regularEvents array range.</blockquote>\r\n     * @param {number} index - The regular event index to remove from class attributes\r\n     * @return {boolean} - The method status ; true for success, false for not cleared any event */\n\n  }, {\n    key: \"_clearRegularEvent\",\n    value: function _clearRegularEvent(index) {\n      // Debug logging\n      this._raise('log', \"CustomEvents._clearRegularEvent: \".concat(index)); // Missing mandatory arguments\n\n\n      if (index === null || index === undefined) {\n        this._raise('error', 'CustomEvents._clearRegularEvent: Missing mandatory argument');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory)\n\n\n      if (typeof index !== 'number') {\n        this._raise('error', 'CustomEvents._clearRegularEvent: Wrong type for argument');\n\n        return false;\n      } // Check if index match an existing event in attributes\n\n\n      if (this._regularEvents[index]) {\n        // Remove its event listener and update regularEvents array\n        var evt = this._regularEvents[index];\n        evt.element.removeEventListener(evt.eventName, evt.callback, evt.options);\n\n        this._regularEvents.splice(index, 1);\n\n        return true;\n      }\n\n      return false;\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  -------------------------------------------  CUSTOM JS EVENTS  -----------------------------------------------  */\n\n    /*                                                                                                                  */\n\n    /*  The three following methods (subscribe, unsubscribe, publish) are designed to reference an event by its name    */\n\n    /*  and handle as many subscriptions as you want. When subscribing, you get an ID you can use to unsubscribe your   */\n\n    /*  event later. Just publish with the event name to callback all its registered subscriptions.                     */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name subscribe\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote>Subscribe method allow you to listen to an event and react when it occurs.</blockquote>\r\n     * @param {string} eventName - Event name (the one to use to publish)\r\n     * @param {function} callback - The callback to execute when event is published\r\n     * @param {boolean} [oneShot=false] - One shot : to remove subscription the first time callback is fired\r\n     * @returns {number|boolean} - The event id, to be used when manually unsubscribing */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(eventName, callback) {\n      var _this3 = this;\n\n      var oneShot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      // Debug logging\n      this._raise('log', \"CustomEvents.subscribe: \".concat(eventName, \" \").concat(callback, \" \").concat(oneShot)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined || callback === null || callback === undefined) {\n        this._raise('error', 'CustomEvents.subscribe', 'Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      var err = function err() {\n        _this3._raise('error', 'CustomEvents.subscribe: Wrong type for argument');\n      };\n\n      if (typeof eventName !== 'string' || typeof callback !== 'function') {\n        err();\n        return false;\n      }\n\n      if (oneShot !== null && oneShot !== undefined && typeof oneShot !== 'boolean') {\n        err();\n        return false;\n      } // Create event entry if not already existing in the registered events\n\n\n      if (!this._customEvents[eventName]) {\n        this._customEvents[eventName] = []; // Set empty array for new event subscriptions\n      } // Push new subscription for event name\n\n\n      this._customEvents[eventName].push({\n        id: this._idIncrementor,\n        name: eventName,\n        os: oneShot,\n        callback: callback\n      }); // Post increment to return the true event entry id, then update the incrementer\n\n\n      return this._idIncrementor++;\n    }\n    /** @method\r\n     * @name unsubscribe\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote>Unsubscribe method allow you to revoke an event subscription from its string name.</blockquote>\r\n     * @param {number} eventId - The subscription id returned when subscribing to an event name\r\n     * @returns {boolean} - The method status ; true for success, false for non-existing subscription **/\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(eventId) {\n      // Debug logging\n      this._raise('log', \"CustomEvents.unsubscribe: \".concat(eventId)); // Missing mandatory arguments\n\n\n      if (eventId === null || eventId === undefined) {\n        this._raise('error', 'CustomEvents.unsubscribe: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory)\n\n\n      if (typeof eventId !== 'number') {\n        this._raise('error', 'CustomEvents.unsubscribe: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Save event keys to iterate properly on this._events Object\n\n      var keys = Object.keys(this._customEvents); // Reverse events iteration to properly splice without messing with iteration order\n\n      for (var i = keys.length - 1; i >= 0; --i) {\n        // Get event subscriptions\n        var subs = this._customEvents[keys[i]]; // Iterate over events subscriptions to find the one with given id\n\n        for (var j = 0; j < subs.length; ++j) {\n          // In case we got a subscription for this events\n          if (subs[j].id === eventId) {\n            // Debug logging\n            this._raise('log', \"CustomEvents.unsubscribe: subscription found\\n\", subs[j], \"\\nSubscription n\\xB0\".concat(eventId, \" for \").concat(subs.name, \" has been removed\")); // Update status code\n\n\n            statusCode = true; // Found and unsubscribed status code (true)\n            // Remove subscription from event Array\n\n            subs.splice(j, 1); // Remove event name if no remaining subscriptions\n\n            if (subs.length === 0) {\n              delete this._customEvents[keys[i]];\n            } // Break since id are unique and no other subscription can be found after\n\n\n            break;\n          }\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n    /** @method\r\n     * @name unsubscribeAllFor\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote><code>unsubscribeAllFor</code> method clear all subscriptions registered for given event name.</blockquote>\r\n     * @param {string} eventName - The event to clear subscription from\r\n     * @returns {boolean} - The method status ; true for success, false for non-existing event **/\n\n  }, {\n    key: \"unsubscribeAllFor\",\n    value: function unsubscribeAllFor(eventName) {\n      // Debug logging\n      this._raise('log', \"CustomEvents.unsubscribeAllFor: \".concat(eventName)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined) {\n        this._raise('error', 'CustomEvents.unsubscribeAllFor: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      if (typeof eventName !== 'string') {\n        this._raise('error', 'CustomEvents.unsubscribeAllFor: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Save event keys to iterate properly on this._events Object\n\n      var keys = Object.keys(this._customEvents); // Iterate through custom event keys to find matching event to remove\n\n      for (var i = 0; i < keys.length; ++i) {\n        if (keys[i] === eventName) {\n          // Get event subscriptions\n          var subs = this._customEvents[keys[i]]; // Iterate over events subscriptions to find the one with given id, reverse iteration to properly splice without messing with iteration order\n\n          for (var j = subs.length - 1; j >= 0; --j) {\n            // Update status code\n            statusCode = true; // Found and unsubscribed all status code (true)\n            // Remove subscription from event Array\n\n            subs.splice(j, 1); // Remove event name if no remaining subscriptions\n\n            if (subs.length === 0) {\n              delete this._customEvents[keys[i]];\n            }\n          }\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n    /** @method\r\n     * @name publish\r\n     * @public\r\n     * @memberof CustomEvents\r\n     * @description <blockquote><code>Publish</code> method allow you to fire an event by name and trigger all its subscription by callbacks./blockquote>\r\n     * @param {string} eventName - Event name (the one to use to publish)\r\n     * @param {object} [data=undefined] - The data object to sent through the custom event\r\n     * @returns {boolean} - The method status ; true for success, false for non-existing event **/\n\n  }, {\n    key: \"publish\",\n    value: function publish(eventName) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // Debug logging\n      this._raise('log', \"CustomEvents.publish: \".concat(eventName, \" \").concat(data)); // Missing mandatory arguments\n\n\n      if (eventName === null || eventName === undefined) {\n        this._raise('error', 'CustomEvents.publish: Missing mandatory arguments');\n\n        return false;\n      } // Prevent wrong type for arguments (mandatory and optional)\n\n\n      if (typeof eventName !== 'string' || data !== undefined && _typeof(data) !== 'object') {\n        this._raise('error', 'CustomEvents.publish: Wrong type for argument');\n\n        return false;\n      } // Returned value\n\n\n      var statusCode = false; // Not found status code by default (false)\n      // Save event keys to iterate properly on this._events Object\n\n      var keys = Object.keys(this._customEvents); // Iterate over saved custom events\n\n      for (var i = 0; i < keys.length; ++i) {\n        // If published name match an existing events, we iterate its subscriptions. First subscribed, first served\n        if (keys[i] === eventName) {\n          // Update status code\n          statusCode = true; // Found and published status code (true)\n          // Get event subscriptions\n\n          var subs = this._customEvents[keys[i]]; // Iterate over events subscriptions to find the one with given id\n          // Reverse subscriptions iteration to properly splice without messing with iteration order\n\n          for (var j = subs.length - 1; j >= 0; --j) {\n            // Debug logging\n            this._raise('log', \"CustomEvents.publish: fire callback for \".concat(eventName, \", subscription n\\xB0\").concat(subs[j].id), subs[j]); // Fire saved callback\n\n\n            subs[j].callback(data); // Remove oneShot listener from event entry\n\n            if (subs[j].os) {\n              // Debug logging\n              this._raise('log', 'CustomEvents.publish: remove subscription because one shot usage is done');\n\n              subs.splice(j, 1); // Remove event name if no remaining subscriptions\n\n              if (subs.length === 0) {\n                delete this._customEvents[keys[i]];\n              }\n            }\n          }\n        }\n      } // Return with status code\n\n\n      return statusCode;\n    }\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /*  --------------------------------------------  COMPONENT UTILS  -----------------------------------------------  */\n\n    /*  --------------------------------------------------------------------------------------------------------------- */\n\n    /** @method\r\n     * @name _raise\r\n     * @private\r\n     * @memberof CustomEvents\r\n     * @description <blockquote>Internal method to abstract console wrapped in debug flag./blockquote>\r\n     * @param {string} level - The console method to call\r\n     * @param {string} errorValue - The error value to display in console method **/\n\n  }, {\n    key: \"_raise\",\n    value: function _raise(level, errorValue) {\n      if (this._debug) {\n        console[level](errorValue);\n      }\n    }\n  }]);\n\n  return CustomEvents;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CustomEvents);\n\n//# sourceURL=webpack://MBP/./src/js/CustomEvents.js?");

/***/ }),

/***/ "./src/mbp.js":
/*!********************!*\
  !*** ./src/mbp.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _js_CustomEvents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/CustomEvents */ \"./src/js/CustomEvents.js\");\n/* harmony import */ var _mbp_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mbp.scss */ \"./src/mbp.scss\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\nvar MBP = /*#__PURE__*/function () {\n  function MBP() {\n    _classCallCheck(this, MBP);\n\n    this._selectedPage = 'home';\n    this.evts = new _js_CustomEvents__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n    this._displayConsoleWelcome();\n\n    this._hideFlashingLogo().then(this._buildNav.bind(this)).then(this._buildHomepage.bind(this));\n  }\n\n  _createClass(MBP, [{\n    key: \"_displayConsoleWelcome\",\n    value: function _displayConsoleWelcome() {\n      console.log('%cHello, you hacky nerd!', 'font-size:16pt');\n      console.log(\"Do you have some piece of code you want to promote or do you need a hand with it ?\\nReach %ccontact@messe-basse-production.com%cso we can find a way to help you!\", 'text-decoration:underline;color:blue');\n    }\n  }, {\n    key: \"_hideFlashingLogo\",\n    value: function _hideFlashingLogo() {\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          document.body.removeChild(document.getElementById('flashing-text-logo'));\n          resolve();\n        }, 6000);\n      });\n    }\n  }, {\n    key: \"_buildNav\",\n    value: function _buildNav() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        document.getElementById('navigation').style.opacity = 1;\n        setTimeout(function () {\n          return document.getElementById('link-home').style.animation = 'drop-nav-link 1.8s forwards';\n        }, 500);\n        setTimeout(function () {\n          return document.getElementById('link-creation').style.animation = 'drop-nav-link 1.7s forwards';\n        }, 750);\n        setTimeout(function () {\n          return document.getElementById('link-merch').style.animation = 'drop-nav-link 1.6s forwards';\n        }, 1000);\n        setTimeout(function () {\n          return document.getElementById('link-contact').style.animation = 'drop-nav-link 1.5s forwards';\n        }, 1250);\n        setTimeout(function () {\n          return document.getElementById('socials').style.opacity = 1;\n        }, 2250);\n        document.getElementById('link-home').addEventListener('click', _this._buildHomepage.bind(_this));\n        document.getElementById('link-creation').addEventListener('click', _this._buildCreationpage.bind(_this));\n        document.getElementById('link-merch').addEventListener('click', _this._buildMerchpage.bind(_this));\n        document.getElementById('link-contact').addEventListener('click', _this._buildContactpage.bind(_this));\n        setTimeout(resolve, 1500);\n      });\n    }\n    /* Pages */\n\n  }, {\n    key: \"_buildHomepage\",\n    value: function _buildHomepage() {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2._fetchTemplate('assets/html/home.html', 'home').then(resolve);\n      });\n    }\n  }, {\n    key: \"_buildCreationpage\",\n    value: function _buildCreationpage() {\n      var _this3 = this;\n\n      return new Promise(function (resolve) {\n        _this3._fetchTemplate('assets/html/creation.html', 'creation').then(function () {\n          _this3.evts.addEvent('click', document.getElementById('podcast-rg'), _this3._buildPodcastModal, _this3);\n\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"_buildMerchpage\",\n    value: function _buildMerchpage() {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        _this4._fetchTemplate('assets/html/merch.html', 'merch').then(resolve);\n      });\n    }\n  }, {\n    key: \"_buildContactpage\",\n    value: function _buildContactpage() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        _this5._fetchTemplate('assets/html/contact.html', 'contact').then(function () {\n          _this5.evts.addEvent('click', document.getElementById('credit-modal'), _this5._buildCreditModal, _this5);\n\n          resolve();\n        });\n      });\n    }\n    /* Modals */\n\n  }, {\n    key: \"_buildPodcastModal\",\n    value: function _buildPodcastModal(e) {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        _this6._fetchModal('assets/html/modal/podcast.html', e.target).then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"_buildCreditModal\",\n    value: function _buildCreditModal() {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._fetchModal('assets/html/modal/credit.html').then(function () {\n          resolve();\n        });\n      });\n    }\n    /* Utils */\n\n  }, {\n    key: \"_fetchTemplate\",\n    value: function _fetchTemplate(url, className) {\n      var _this8 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this8.evts.removeAllEvents();\n\n        document.getElementById(\"link-\".concat(_this8._selectedPage)).classList.remove('selected');\n        _this8._selectedPage = className;\n        document.getElementById(\"link-\".concat(_this8._selectedPage)).classList.add('selected');\n        document.getElementById('scene').style.opacity = 0;\n        setTimeout(function () {\n          fetch(url).then(function (data) {\n            data.text().then(function (htmlString) {\n              document.getElementById('scene').classList.remove('selected');\n              document.getElementById('scene').className = className;\n              document.getElementById('scene').innerHTML = '';\n              document.getElementById('scene').appendChild(document.createRange().createContextualFragment(htmlString));\n              document.getElementById('scene').style.opacity = 1;\n              setTimeout(resolve, 600);\n            })[\"catch\"](reject);\n          })[\"catch\"](reject);\n        }, 600);\n      });\n    }\n  }, {\n    key: \"_fetchModal\",\n    value: function _fetchModal(url, target) {\n      var _this9 = this;\n\n      return new Promise(function (resolve, reject) {\n        var evtIds = [];\n\n        var closeModal = function closeModal(e) {\n          if (['overlay', 'close-modal'].indexOf(e.target.id) === -1) {\n            return;\n          }\n\n          document.getElementById('overlay').style.opacity = 0;\n          setTimeout(function () {\n            document.getElementById('overlay').style.display = 'none';\n            document.getElementById('overlay').innerHTML = '';\n\n            for (var i = 0; i < evtIds.length; ++i) {\n              _this9.evts.removeEvent(evtIds[i]);\n            }\n          }, 600);\n        };\n\n        var displayModal = function displayModal() {\n          setTimeout(function () {\n            document.getElementById('modal').style.opacity = 1;\n            evtIds.push(_this9.evts.addEvent('click', document.getElementById('overlay'), closeModal, _this9));\n            evtIds.push(_this9.evts.addEvent('click', document.getElementById('close-modal'), closeModal, _this9));\n            setTimeout(resolve, 600);\n          }, 50);\n        };\n\n        var fillModal = function fillModal(type) {\n          fetch(\"assets/json/\".concat(type, \".json\")).then(function (data) {\n            data.json().then(function (json) {\n              document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_TITLE}}', json.title);\n              document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_IMG}}', json.img);\n              document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_IMG_ALT}}', json.imgAlt);\n              document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_DESC}}', json.desc); // Copy season HTML before modification to append new one\n\n              var season = document.createRange().createContextualFragment(document.getElementById('season-1').outerHTML);\n\n              for (var i = 0; i < json.s.length; ++i) {\n                if (i > 0) {\n                  // Create new season and append it to modal container\n                  var node = season.cloneNode(true);\n                  node.id = \"season-\".concat(i + 1);\n                  document.getElementById('main-container').appendChild(node);\n                }\n\n                var seasonName = \"Saison \".concat(i + 1, \" : \").concat(json.s[i].name);\n                document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_SEASON_NAME}}', seasonName);\n                var episode = document.createRange().createContextualFragment(document.getElementById('episode-1').outerHTML);\n\n                for (var j = 0; j < json.s[i].e.length; ++j) {\n                  if (j > 0) {\n                    //Create new episode and appendi it to season container\n                    var _node = episode.cloneNode(true);\n\n                    _node.id = \"episode-\".concat(j + 1);\n                    console.log(_node.id);\n                    document.getElementById('episodes-container').appendChild(_node);\n                  }\n\n                  document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_EPISODE_IMG}}', json.s[i].e[j].img);\n                  document.getElementById('modal').innerHTML = document.getElementById('modal').innerHTML.replace('{{PODCAST_EPISODE_NAME}}', json.s[i].e[j].name);\n                }\n              }\n\n              displayModal();\n            })[\"catch\"](reject);\n          })[\"catch\"](reject);\n        };\n\n        document.getElementById('overlay').style.display = 'flex';\n        setTimeout(function () {\n          document.getElementById('overlay').style.opacity = 1;\n          setTimeout(function () {\n            fetch(url).then(function (data) {\n              data.text().then(function (htmlString) {\n                document.getElementById('overlay').appendChild(document.createRange().createContextualFragment(htmlString));\n\n                if (!target) {\n                  displayModal();\n                } else {\n                  fillModal(target.dataset.name);\n                }\n              })[\"catch\"](reject);\n            })[\"catch\"](reject);\n          }, 50);\n        }, 50);\n      });\n    }\n  }]);\n\n  return MBP;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MBP);\n\n//# sourceURL=webpack://MBP/./src/mbp.js?");

/***/ }),

/***/ "./src/mbp.scss":
/*!**********************!*\
  !*** ./src/mbp.scss ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://MBP/./src/mbp.scss?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/mbp.js");
/******/ 	window.MBP = __webpack_exports__["default"];
/******/ 	
/******/ })()
;